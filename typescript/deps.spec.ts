import JSChaCha20 from "js-chacha20";
import { str2u8a, str2u8a32 } from ".";
import { scryptSync, ScryptOptions } from "crypto";
// import { add } from "./sig_lib_rs/sig_lib_rs_bg";
import { add } from "ed25519-sigs";

export const scrypt = (password: Buffer, salt: Buffer) => {
  const scryptOptions: ScryptOptions = { N: 16384, r: 8, p: 1 };
  return scryptSync(password, salt, 64, scryptOptions);
};

export const toUtf8 = (data: string): Buffer => {
  const nor: string = data.normalize("NFKD");
  return Buffer.from(nor, "utf8");
};

describe("add", () => {
  it("add", () => {
    let res = add(2, 1);
    console.log({ res });
  });
});

describe("scryptSync", () => {
  it("scryptSync", () => {
    const mnemo = "correct horse battery staple";
    const mu8 = toUtf8(mnemo);
    // // prettier-ignore
    // const pass = new Uint8Array([
    //     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    //     0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
    //     0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
    //     0x1e, 0x1f
    // ]);
    const salt = new Uint8Array([0x00]);
    const derived = scrypt(mu8, Buffer.from(salt));

    console.log({ derived });

    expect(derived.length).toBe(64);
  });
});
// describe("encrypt / decrypt with JSChaCha20", () => {
//   it("should encrypt and decrypt with JSChaCha20", () => {
//     const inputStr = "correct horse battery staple pad";
//     const u8a = str2u8a32(inputStr);

//     // prettier-ignore
//     const key = new Uint8Array([
//         0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
//         0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
//         0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
//         0x1e, 0x1f
//     ])
//     // prettier-ignore
//     const nonce = new Uint8Array([
//         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//         0x00, 0x00, 0x00, 0x00
//     ])

//     const counter = 1;

//     // prettier-ignore
//     const text = new Uint8Array([
//         0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
//         0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
//         0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
//         0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
//         0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
//         0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
//         0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
//         0x74, 0x2e
//     ])

//     // encrypt
//     // const encryptor = new JSChaCha20(key, nonce, counter);
//     const encryptor = new JSChaCha20(u8a);
//     const encd = encryptor.encrypt(text);
//   });
// });
